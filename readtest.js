const readMsgId = require("./payloadReader").readMsgId;
// import { readMsgId } from "./payloadReader";
const msgIds = require("./neededMsg").msgIds;
const axios = require("axios");

main();

//TODO check if merge needed

// import { msgIds, msgName } from "./neededMsg";
async function main() {
  let srcport = 5555;
  let dataPayload =
    "038a03396141a69c0416000000000000040024424e097380680000003c00f301ff04000000040140e0d00240e0d003f8bf010476644300017800010200020004788c11ac02b201000501ebdec0024f4d340375151604ebdec0053d472b0001a0010000000a4a657373792d726f7465009d000800000000010104c8000000424e097380b2000000a0c0d3880000000000003c015605d22600000000000178000000008c0000009f04001c0000ffff00a0c0d3888000000000003c008707d12600000000000178000000008c0000006705001e00030000006804001cd42600000000000178000000000068020018d4260000000000017800000000006704001cd126000000000001780000ffff00a0c0d3884000000000003c01f403d42600000000000178000000008c00000068010016000100000067010016d126000000000001780000ffff000e018e0007d866000000210000000100db2705aa691e010000018e0007d7d900000001000100db0605aa691d0000010000018e0007d86800000001000100db0605aa69230000010000018e0007d7d800000001000100db0605aa691c0000010000018e0007d987000000430000000100db4705aa6926010009018e0007d867000000220000000100db2805aa6920010003018e0007d997000000420000000100db4805aa697b000000018e0007d996000000430000000100db4705aa697a00000000500007d830000000010000000100db0605aa691400018e0007d8cf0000001c0000000100db2105aa697600005b018e0007d80e00000001000100db0605aa696c0000000000018e0007d82d0000001e0000000100db2305aa6903000002018e0007d82c00000001000100db0605aa69000000000001018e0007d91b000000210000000100db2705aa691a000000000e0007d8664b00010007d7d9f00300010007d868cc0300010007d7d85000010007d987ed0100010007d867fd0100010007d997fc0300000007d996ba0100000007d830ad0401000007d8cfc00300000007d80e7100000007d82de70200000007d82c7000000007d91b9d0400000000000001000ccc01d901da01e701e801f401f501820283028f0290029e02000cb303c103c203cf03d003de03df03ec03ed03fb03fc03890464d90b0001d0819c97c10700010002a90b424e09738068000000080002c0";
  let msgId = readMsgId(dataPayload);
  if (!msgIds.includes(msgId)) return;
  let context = getContext(srcport);
  let decodedMessage = await decodePayload(dataPayload, context);
  console.log("decoded message:");
  console.log(decodedMessage);
}

async function decodePayload(payload, context) {
  let response;
  try {
    response = await axios.post(
      "https://webd2decoder.herokuapp.com/decoder/".concat(context),
      payload
    );
    return response.data;
  } catch (err) {
    console.error(`error ${payload}`);
    return "error";
  }
}

function getContext(srcport) {
  let context = "fromclient";
  if (srcport == 5555) {
    context = "fromserver";
  }
  return context;
}
