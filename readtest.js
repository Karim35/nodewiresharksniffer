const payloadReader = require("./payloadReader");
// import { readMsgId } from "./payloadReader";
const msgIds = require("./neededMsg").msgIds;
const axios = require("axios");
const treasureHelper = require("./treasureHelper");

main();

//TODO check if merge needed

// import { msgIds, msgName } from "./neededMsg";
async function main() {
  let srcport = 5555;
  let dataPayload =
    "038a0a650a4195081c5c0000000000000e0024425fc3dcc0340000003c016b04ff04000000040100000002ed000403ad8d3904766443000178000102000200061f8410f508ef08981d8006000701eac06202ffffff0300000004ed000405ad8d390700000008e7e30000015f0000000744656c746f726f009d0008000100030199ec830100134c6573206d61757661697320656e20746f75740bd20100e7e3001a000000000198500000019b7f470800000cce026c0e0d010001425fc3dcc045c0000024424df41b80680000003c00db07010006ff0aa411811bc5019903bc1a000701e1973702987649036f859104eadcc2051c2225079b3c9508ffffff00019b01000101009202000000000001500000000754696b2d54616b009d000800010002019993180008457874617a6961279f0900ffffff01009b3c95019b70fd01ffff03ffffffff019d2975020100424df41b80cc0000002442339e9d00d00000003c0190010100063cb010db0bc70bb91d981a00090190f8e902020c7e0303024e04041562051e83ca0720384708d9d9da09ffffff0a0200000001960100010100fa160000000000000000000a44736b616b6f756e6574009d00080000000201998061000957697369676f74687397e70100d9d9da010020384701a9c3180003424f5500124c27616e74726520647520426f7566746f755d000200000700ffffff00008af7ea01000042339e9d0198000000244251163280340000003c00db070100063cac10d013bc02871cbf1a000701e3dac302b16af803685778048c54c405d7b5f907ae3fa8080000000001960100010100b72700000000000150000000084f73616c69736d61009d0008000000010199ab7a000f4d616d616e2044616e73205061706125a201000000001c00ae3fa8017974a600000042511632806600000024425f6d3b40340000003c017501ff04000000040124242402201e1f03dc3a12047664430001780001020002000651d710d21ae7082ded0700050103030002d700000324242404201e1f05dc3a1200018c0100000007426f6f736b2d70009d00080001000007919819000000425f6d3b404880000024425f40ebc0340000003c016b01010006aa1bb31b821e801e811ebc1a0009015f533a02865d2903ac701504362f1f058543130700000008d51018090000000affffff00019b0100010100ff29000000000000000000074c61696b617874009d0008000000030199ec0600064661696c27735b840100d51018080000000001a9af1100054a544e4b4c000f5369204a6520742761747472617065d00100ffffff010000000000019871000007bfbd3d000000425f40ebc06600000024425f4aaac0340000003c01fc03010006799b11ef1cad1be61bc813000901ffffe802171819033b3b4f045b6b7e053b3b4f07010b13086da6f7090703230aa9a7fa00019101000101008c0b0000000000015a0000000f426c697a7a79612d50616e646f7265009d0008000100040199b0060006456e657267799e08006da6f70300010b1301a9950f0003434d42001c4372696d65204d61676f75696c6c6520657420426f74616e69717565e90100a9a7fa0f0007032300019899010000019b39ae02ffff03ffffffff02c85c3d016400425f4aaac06600000024425f3b7a80340000003c017f01010006ab1bb71bf008b90a81149c0400090102010202201e1e0395333c043c3c4e05c9c7b507ffffff084b484a09ffffff0a8b92bc0001910100010100f0190000000000000000000b526f7567652d54686f726e009d0008000100040199b95e0009426c61636b6a61636b8d9001004b484a0800ffffff01a9d3160003514254000e4c6520517561727465726261636b21008b92bc0800ffffff000198fc010000019b11fd012000000730079433e8022a00425f3b7a806600000024425ec4d880340000003c01fa010100066f8511f11b901da51dbc1a000901fcc371023c5daa03252b4304877cfe05414f6a07ffffff0826c4ec090703230aa9a7fa00018c0100010100b727000000000001500000000948656c6c2d48696e61009d0008000100040199d20b000e416e676520657420447261676f6e7988010026c4ec1700ffffff01a9950f0003434d42001c4372696d65204d61676f75696c6c6520657420426f74616e69717565e90100a9a7fa0f00070323000198c2010000019b59f601ffff03ffffffff05f0eb47024000425ec4d8806600000024425f558980340000003c00db01ff040001a61a0004012f0000022f0000032f000004ffc60000017800010200020006d619e219ce08f51adb099a17000701efcb8702df19e20380000204c1154305f5bbed07be7b0d0800000000018701000000104d617274696e652d436f7573636f7573009d0008000100030199887d001853616e2042657574657568206465206c6120526170697461182c000000001d00be7b0d01989c020000019b50e101ffff03ffffffff07d797e2025000425f5589806600000024424e097380680000003c00db03ff04000000040140e0d00240e0d003f8bf010476644300017800010200020004788c11ac02b201000501ebdec0024f4d340375151604ebdec0053d472b0001a0010000000a4a657373792d726f7465009d000800000000010104c8000000424e097380b20000002442316ba700d00000003c012101010006d619e319f008d41cdd1cbc1a000901ffcb5402574631031f1f1f04fbc00005c4c4c40740443d08ffea93090f1a230aecedbd0001870100010100f6270000000901ffcb5402574631031f1f1f04fbc00005c4c4c40740443d08ffea93090f1a230aecedbd000000000006486176616e79009d0008000100040199ac7e00144c27417562657267652044657320426572676573589d0100ffea93080040443d01a9ab160003475459000747726176697479890100ecedbd09000f1a230001989c020000019b11fb01ffff03ffffffff03e1fb6e012f0042316ba7019800000024425f7e21c0340000003c01ed03010006ec18fe18cf1cda1ca31cbc1a000901f0c59102f5e7ba03002b2604b8863e0508fbc307010b13086da6f7090703230aa9a7fa00018c0100010100b6270000000000015000000008426c697a7a697961009d0008000100040199b0060006456e657267799e08006da6f70300010b1301a9950f0003434d42001c4372696d65204d61676f75696c6c6520657420426f74616e69717565e90100a9a7fa0f00070323000198fc010000019b3cf201ffff03ffffffff07c89ade016400425f7e21c0660000009cc0d388c000000000003c014801c1140000000000014b0000831300000006018e000790d4000000ff0000000100db4505aa2aee0100000050000790d3000000ff0000000100db4505aa2ae90100500007e42f00000010000100db7205aa2af0000001018e0007900e000000fe000100db4405aa28050000000000018e000790db000000ff0000000100db4505aa28070000000050000790da000000ff0000000100db4505aa2806000007000790d4f0030001000790d33b01010007e42fcd0100010007e39fe90100010007900e8c020000000790dbc4030000000790da4901000000000001000cc701d401d70187029a02b602bf02dc02ee0280039103d503000c8501ad01b801e701f801a202a702ce02e502fc028c039f03";
  const MSGID_DATALEN_SIZE = 2;
  const header = payloadReader.getHeaderFromPayload(dataPayload);
  const dataLenLen = payloadReader.getDataLenLen(header);
  const HEADER_SIZE = MSGID_DATALEN_SIZE + dataLenLen;
  console.log(`header size: ${HEADER_SIZE}`);
  let dataLen = payloadReader.readDataLen(dataPayload);
  console.log(`dataLength: ${dataLen}`);
  console.log(
    `payload length without header length: ${Buffer.byteLength(
      dataPayload,
      "hex"
    ) - HEADER_SIZE}`
  );
  let msgId = payloadReader.readMsgId(dataPayload);
  console.log(msgId);
  if (!msgIds.includes(msgId)) return;
  let context = getContext(srcport);
  let decodedMessage = await decodePayload(dataPayload, context);
  // console.log("decoded message:");
  // console.log(decodedMessage);
  // console.log(decodedMessage.__type__);
  treasureHelper.handleData(decodedMessage);
}

async function decodePayload(payload, context) {
  let response;
  try {
    response = await axios.post(
      "https://webd2decoder.herokuapp.com/decoder/".concat(context),
      payload
    );
    return response.data;
  } catch (err) {
    console.error(`error ${payload}`);
    return "error";
  }
}

function getContext(srcport) {
  let context = "fromclient";
  if (srcport == 5555) {
    context = "fromserver";
  }
  return context;
}
